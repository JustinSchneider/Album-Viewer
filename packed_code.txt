--- START OF HEADER ---
Generated on: 2024-10-20T17:42:45.394Z
Generated by: VS Code Code Packer Extension
Purpose: Code packing for analysis or documentation
--- END OF HEADER ---

--- FILE: UI/AlbumUI.cs ---
using System.Collections;
using JMS.Components;
using JMS.Factories;
using JMS.Managers;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;

namespace JMS.UI
{
    public class AlbumUI : MonoBehaviour
    {
        [SerializeField] private AlbumEntryFactory entryFactory;
        [SerializeField] private AlbumEntryManager entryManager;
        [SerializeField] private Button btnAddEntry;
        [SerializeField] private Button btnDeleteEntry;
        [SerializeField] private ImageViewer imageViewer;
        
        [SerializeField] private GameObject ghostEntryPrefab;


        private GameObject ghostEntry;
        private bool isPlacementMode = false;

        private void Start()
        {
            btnAddEntry.onClick.AddListener(StartPlacementMode);
            btnDeleteEntry.onClick.AddListener(DeleteSelectedEntry);
            
            entryManager.onEntrySelected.AddListener(UpdateSelectedImage);
            entryManager.onEntryAdded.AddListener(UpdateButtonStates);
            entryManager.onEntryDeleted.AddListener(UpdateButtonStates);

            UpdateButtonStates(null);
        }

        private void Update()
        {
            if (isPlacementMode)
            {
                UpdateGhostPosition();

                if (Input.GetMouseButtonDown(0))
                {
                    PlaceEntry();
                }
            }
        }

        private void UpdateButtonStates(AlbumEntry entry)
        {
            btnAddEntry.gameObject.SetActive(true);
            btnDeleteEntry.gameObject.SetActive(entryManager.SelectedEntry);
        }

        private void StartPlacementMode()
        {
            isPlacementMode = true;
            ghostEntry = Instantiate(ghostEntryPrefab);
            
            // Deselect the current entry
            if (entryManager.SelectedEntry != null)
            {
                entryManager.SelectEntry(null);
            }
        }
        
        private void UpdateGhostPosition()
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            if (Physics.Raycast(ray, out RaycastHit hit))
            {
                ghostEntry.transform.position = hit.point;
            }
        }

        private async void PlaceEntry()
        {
            isPlacementMode = false;
            Vector3 placementPosition = ghostEntry.transform.position;
            Destroy(ghostEntry);
            ghostEntry = null;

            AlbumEntry newEntry = await entryFactory.CreateAlbumEntry();
            if (newEntry != null)
            {
                newEntry.transform.position = placementPosition;
                entryManager.AddEntry(newEntry);
                entryManager.SelectEntry(newEntry);
                Debug.Log($"Created entry: {newEntry.Title}");
            }

            UpdateButtonStates(newEntry);
        }

        private void DeleteSelectedEntry()
        {
            if (entryManager != null && entryManager.SelectedEntry != null)
            {
                AlbumEntry entryToDelete = entryManager.SelectedEntry;
                if (entryToDelete != null)
                {
                    entryManager.RemoveEntry(entryToDelete);
                    Debug.Log($"Deleted entry: {entryToDelete.Title}");
                    Destroy(entryToDelete.gameObject);
                    UpdateButtonStates(null);
                }
                else
                {
                    Debug.LogWarning("Selected entry is null, cannot delete.");
                }
            }
            else
            {
                Debug.LogWarning("No entry selected or entry manager is null.");
            }
        }

        private void UpdateSelectedImage(AlbumEntry selectedEntry)
        {
            if (selectedEntry != null)
            {
                imageViewer.LoadImage(selectedEntry.Url);
            }
            else
            {
                imageViewer.Clear();
            }
            UpdateButtonStates(selectedEntry);
        }
        
        private void OnDestroy()
        {
            // Unsubscribe from events to prevent memory leaks
            if (entryManager != null)
            {
                entryManager.onEntrySelected.RemoveListener(UpdateSelectedImage);
                entryManager.onEntryAdded.RemoveListener(UpdateButtonStates);
                entryManager.onEntryDeleted.RemoveListener(UpdateButtonStates);
            }
        }
    }
}
--- END FILE ---

--- FILE: Model/PhotoData.cs ---
namespace JMS.Model
{
    [System.Serializable]
    public class PhotoData
    {
        public int id;
        public int albumId;
        public string title;
        public string url;
        public string thumbnailUrl;
    }
}
--- END FILE ---

--- FILE: Services/APIService.cs ---
using System.Threading.Tasks;
using JMS.Model;
using UnityEngine;
using UnityEngine.Networking;

namespace JMS.Services
{
    [CreateAssetMenu(fileName = "APIService", menuName = "Services/API Service")]
    public class APIService : ScriptableObject
    {
        private const string BASE_URL = "https://jsonplaceholder.typicode.com";

        public async Task<PhotoData> GetPhotoData(int id)
        {
            string url = $"{BASE_URL}/photos/{id}";
        
            using (UnityWebRequest webRequest = UnityWebRequest.Get(url))
            {
                var operation = webRequest.SendWebRequest();

                while (!operation.isDone)
                    await Task.Yield();

                if (webRequest.result != UnityWebRequest.Result.Success)
                {
                    Debug.LogError($"Error: {webRequest.error}");
                    return null;
                }

                string jsonResult = webRequest.downloadHandler.text;
                return JsonUtility.FromJson<PhotoData>(jsonResult);
            }
        }
    }
}
--- END FILE ---

--- FILE: Managers/AlbumEntryManager.cs ---
using System.Collections.Generic;
using JMS.Components;
using JMS.Events;
using UnityEngine;
using UnityEngine.Events;

namespace JMS.Managers
{
    [CreateAssetMenu(fileName = "AlbumEntryManager", menuName = "Managers/Album Entry Manager")]
    public class AlbumEntryManager : ScriptableObject
    {
        public List<AlbumEntry> AlbumEntries { get; private set; } = new List<AlbumEntry>();
        public AlbumEntry SelectedEntry { get; private set; }

        [SerializeField] private AlbumEvents albumEvents;

        // Define UnityEvents for entry selection, addition, and deletion
        [System.Serializable] public class AlbumEntryEvent : UnityEvent<AlbumEntry> { }
    
        public AlbumEntryEvent onEntrySelected = new AlbumEntryEvent();
        public AlbumEntryEvent onEntryAdded = new AlbumEntryEvent();
        public AlbumEntryEvent onEntryDeleted = new AlbumEntryEvent();

        public int NextId { get; private set; }
        
        private void OnEnable()
        {
            NextId = 1;
            
            if (albumEvents == null) return;
            
            albumEvents.onEntryClicked.AddListener(SelectEntry);
        }

        private void OnDisable()
        {
            albumEvents.onEntryClicked.RemoveListener(SelectEntry);
        }

        public void AddEntry(AlbumEntry entry)
        {
            NextId = entry.Id + 1;
            AlbumEntries.Add(entry);
            onEntryAdded.Invoke(entry);
        }

        public void RemoveEntry(AlbumEntry entry)
        {
            if (NextId == entry.Id - 1)
            {
                // This was the last entry
                NextId = entry.Id;
            }
            
            AlbumEntries.Remove(entry);
            if (SelectedEntry == entry)
            {
                SelectEntry(null);
            }
            onEntryDeleted.Invoke(entry);
        }

        public void SelectEntry(AlbumEntry entry)
        {
            if (SelectedEntry != null)
            {
                SelectedEntry.SetSelected(false);
            }
        
            SelectedEntry = entry;
        
            if (SelectedEntry != null)
            {
                SelectedEntry.SetSelected(true);
            }
            onEntrySelected.Invoke(SelectedEntry);
        }
    }
}
--- END FILE ---

--- FILE: Factories/AlbumEntryFactory.cs ---
using System.Threading.Tasks;
using JMS.Components;
using JMS.Managers;
using JMS.Model;
using JMS.Services;
using UnityEngine;

namespace JMS.Factories
{
    [CreateAssetMenu(fileName = "AlbumEntryFactory", menuName = "Factories/Album Entry Factory")]
    public class AlbumEntryFactory : ScriptableObject
    {
        [SerializeField] private APIService apiService;
        [SerializeField] private GameObject albumEntryPrefab;
        [SerializeField] private AlbumEntryManager albumEntryManager;

        public async Task<AlbumEntry> CreateAlbumEntry()
        {
            int id = albumEntryManager.NextId;
            
            PhotoData photoData = await apiService.GetPhotoData(id);
        
            if (photoData == null)
            {
                Debug.LogError("Failed to fetch photo data");
                return null;
            }

            GameObject entryObject = Instantiate(albumEntryPrefab);
            AlbumEntry albumEntry = entryObject.GetComponent<AlbumEntry>();
            albumEntry.Initialize(photoData);

            return albumEntry;
        }
    }
}
--- END FILE ---

--- FILE: Components/ImageViewer.cs ---
using System;
using System.Collections;
using TMPro;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;

namespace JMS.Components
{
    public class ImageViewer : MonoBehaviour
    {
        [SerializeField] private Image imgAlbumEntryImage;
        [SerializeField] private Image imgLoadingSpinner;
        [SerializeField] private TMP_Text txtErrorMessage;
        [SerializeField] private float spinSpeed = 360f;
        
        private Coroutine loadingCoroutine;
        private bool isLoading = false;

        private void Awake()
        {
            imgLoadingSpinner.gameObject.SetActive(false);
            imgLoadingSpinner.gameObject.SetActive(false);
            txtErrorMessage.gameObject.SetActive(false);
        }

        private void Update()
        {
            if (isLoading)
            {
                imgLoadingSpinner.transform.Rotate(0, 0, -spinSpeed * Time.deltaTime);
            }
        }

        public void LoadImage(string url)
        {
            // Clear previous state
            imgAlbumEntryImage.sprite = null;
            imgAlbumEntryImage.color = Color.clear;
            txtErrorMessage.text = string.Empty;

            // Show loading spinner
            imgLoadingSpinner.gameObject.SetActive(true);
            isLoading = true;

            // Stop any ongoing loading coroutine
            if (loadingCoroutine != null)
            {
                StopCoroutine(loadingCoroutine);
            }

            // Start new loading coroutine
            loadingCoroutine = StartCoroutine(LoadImageCoroutine(url));
        }

        private IEnumerator LoadImageCoroutine(string url)
        {
            UnityWebRequest request = UnityWebRequestTexture.GetTexture(url);
            yield return request.SendWebRequest();
            
            isLoading = false;

            // Hide loading spinner
            imgLoadingSpinner.gameObject.SetActive(false);

            if (request.result == UnityWebRequest.Result.Success)
            {
                Texture2D texture = ((DownloadHandlerTexture)request.downloadHandler).texture;
                Sprite sprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), new Vector2(0.5f, 0.5f));
                imgAlbumEntryImage.sprite = sprite;
                imgAlbumEntryImage.color = Color.white;
            }
            else
            {
                Debug.LogError($"Failed to load image: {request.error}");
                txtErrorMessage.text = $"Failed to load image: {request.error}";
            }

            loadingCoroutine = null;
        }

        public void Clear()
        {
            imgAlbumEntryImage.sprite = null;
            imgAlbumEntryImage.color = Color.clear;
            imgLoadingSpinner.gameObject.SetActive(false);
            txtErrorMessage.text = string.Empty;

            if (loadingCoroutine != null)
            {
                StopCoroutine(loadingCoroutine);
                loadingCoroutine = null;
            }
        }
    }
}
--- END FILE ---

--- FILE: Events/AlbumEvents.cs ---
﻿using UnityEngine;
using JMS.Components;

namespace JMS.Events
{
    [CreateAssetMenu(fileName = "AlbumEvents", menuName = "Events/Album Events")]
    public class AlbumEvents : ScriptableObject
    {
        public AlbumEntryEvent onEntryClicked = new AlbumEntryEvent();
    }

    [System.Serializable]
    public class AlbumEntryEvent : UnityEngine.Events.UnityEvent<AlbumEntry> { }
}
--- END FILE ---

--- FILE: Components/Background.cs ---
using JMS.Events;
using UnityEngine;

namespace JMS.Components
{
    public class Background : MonoBehaviour
    {
        [SerializeField] private AlbumEvents albumEvents;
    
        private void OnMouseDown()
        {
            albumEvents.onEntryClicked.Invoke(null);
        }
    }
}

--- END FILE ---

--- FILE: Components/AlbumEntry.cs ---
using JMS.Model;
using JMS.Events;
using TMPro;
using UnityEngine;

namespace JMS.Components
{
    public class AlbumEntry : MonoBehaviour
    {
        public int Id { get; private set; }
        public int AlbumId { get; private set; }
        public string Title { get; private set; }
        public string Url { get; private set; }
        public string ThumbnailUrl { get; private set; }

        [SerializeField] private Renderer entryRenderer;
        [SerializeField] private Color selectedColor = Color.yellow;
        [SerializeField] private Color deselectedColor = Color.white;
        [SerializeField] private AlbumEvents albumEvents;
        [SerializeField] private TMP_Text txtAlbumId;

        public void Initialize(PhotoData data)
        {
            Id = data.id;
            AlbumId = data.albumId;
            Title = data.title;
            Url = data.url;
            ThumbnailUrl = data.thumbnailUrl;
            txtAlbumId.text = data.id.ToString();
        }

        public void SetSelected(bool isSelected)
        {
            entryRenderer.material.color = isSelected ? selectedColor : deselectedColor;
        }

        private void OnMouseDown()
        {
            albumEvents.onEntryClicked.Invoke(this);
        }
    }
}
--- END FILE ---

